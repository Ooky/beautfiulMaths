void setup() {

  perlin(2134,13.5, 1);
}

public double perlin(float pointX, float pointY, int dimension) {  
  float myPointX = pointX%dimension;
  float myPointY = pointY%dimension;
  PVector myPoint = new PVector(myPointX, myPointY);
  int x0=0;
  int x1=dimension;
  int y0=0;
  int y1=dimension;
  
  
  PVector gradientVectorBottomLeft, gradientVectorBottomRight,
  gradientVectorTopRight, gradientVectorTopLeft;
  gradientVectorBottomLeft = new PVector(randomGradientVector(dimension), randomGradientVector(dimension));
  gradientVectorBottomRight = new PVector(randomGradientVector(dimension), randomGradientVector(dimension));
  gradientVectorTopRight = new PVector(randomGradientVector(dimension), randomGradientVector(dimension));
  gradientVectorTopLeft = new PVector(randomGradientVector(dimension), randomGradientVector(dimension));
  
  PVector distanceVectorBottomLeft, distanceVectorBottomRight,
  distanceVectorTopRight, distanceVectorTopLeft;
  distanceVectorBottomLeft= myPoint.sub(x0,y0);
  distanceVectorBottomRight= myPoint.sub(x1,y0);
  distanceVectorTopRight= myPoint.sub(x1,y1);
  distanceVectorTopLeft= myPoint.sub(x0,y1);
  
  float influenceValueBottomLeft = gradientVectorBottomLeft.x * distanceVectorTopRight.x+
                                   gradientVectorBottomLeft.y * distanceVectorTopRight.y;
  float influenceValueBottomRight;
  float influenceValueTopRight;
  float influenceValueTopLeft;
 
  

  return myX;
}


public int randomGradientVector(int dimension) {
  return round(random(-1*(dimension),dimension));
}


void draw() {
  
  
}