import java.util.Stack;

class Cell {
  private final int x;
  private final int y;
  private HashMap<String, Boolean> arrWalls = new HashMap<String, Boolean>();
  private boolean alreadyVisited = false;

  Cell(final int x, final int y) {
    this.x = x; 
    this.y = y;
    arrWalls.put("TOP", true);
    arrWalls.put("RIGHT", true);
    arrWalls.put("BOTTOM", true);
    arrWalls.put("LEFT", true);
  }

  private void drawGrid() {
    stroke(255); //lineColor
    int positionX = x*SQUARE_SIZE;
    int positionY = y*SQUARE_SIZE;     
    //--------------------------------------------------------------
    //TOP    - LEFT : (positionX            , positionY) 
    //TOP    - RIGHT: (positionX+SQUARE_SIZE, positionY)
    //BOTTOM - RIGHT: (positionX+SQUARE_SIZE, positionY+SQUARE_SIZE)
    //BOTTOM - LEFT : (positionX            , positionY+SQUARE_SIZE)
    //--------------------------------------------------------------
    //TOP      From: TopLeft to TopRight
    if (this.arrWalls.get("TOP")) {
      line(positionX, positionY, positionX+ SQUARE_SIZE, positionY);
    }
    //RIGHT    From: TopRight to BottomRight
    if (this.arrWalls.get("RIGHT")) {
      line(positionX+SQUARE_SIZE, positionY, positionX+SQUARE_SIZE, positionY+SQUARE_SIZE);
    }
    //BOTTOM   From: BottomRight to BottomLeft
    if (this.arrWalls.get("LEFT")) {
      line(positionX+SQUARE_SIZE, positionY+SQUARE_SIZE, positionX, positionY+SQUARE_SIZE);
    }
    //LEFT     From: BottomLeft to TopLeft
    if (this.arrWalls.get("BOTTOM")) {
      line(positionX, positionY+SQUARE_SIZE, positionX, positionY);
    }

    if (this.alreadyVisited) {
      fill(0, 255, 0, 200); 
      rect(positionX, positionY, SQUARE_SIZE, SQUARE_SIZE);
    }
  }

  public void checkNeighbours() {
    Stack neighbourCells = new Stack();
    //--------------------------------------------------------------
    //TOP    : (x  , y-1) 
    //RIGHT  : (x+1, y  )
    //BOTTOM : (x  , y+1)
    //LEFT   : (x-1, y  )
    //--------------------------------------------------------------
    Cell cellTop = null;
    if (calcAndReturnIndex(x, y-1) > -1) {
      cellTop     = arrCells[calcAndReturnIndex(x, y-1)];
    }
    if (calcAndReturnIndex(x+1, y  ) > -1) {
      Cell cellRight   = arrCells[calcAndReturnIndex(x+1, y  )];
    }
    if (calcAndReturnIndex(x, y+1) > -1) {
      Cell cellBottom  = arrCells[calcAndReturnIndex(x, y+1)];
    }
    if (calcAndReturnIndex(x-1, y  ) > -1) {
      Cell cellLeft    = arrCells[calcAndReturnIndex(x-1, y  )];
    }

    if (!cellTop.alreadyVisited) {
      neighbourCells.push(cellTop);
    }
    if (!cellRight.alreadyVisited) {
      neighbourCells.push(cellRight);
    }
    if (!cellBottom.alreadyVisited) {
      neighbourCells.push(cellBottom);
    }
    if (!cellLeft.alreadyVisited) {
      neighbourCells.push(cellLeft);
    }
  }

  public int calcAndReturnIndex(int x, int y) {
    //EdgeCases: TOP, RIGHT, BOTTOM, LEFT
    if ( y <0 || x > (columns-1) || y >(rows -1)|| x < 0  ) {
      return -1;
    }
    return (y+x*columns);
  }
  public boolean getVisited() {
    return this.alreadyVisited;
  }
  public void setVisited(boolean alreadyVisited) {
    this.alreadyVisited = alreadyVisited;
  }
}